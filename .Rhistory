shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/noided/Desktop/ProjectMIDAS-devintperry-shinydbstub')
runApp('C:/Users/noided/Desktop/ProjectMIDAS-main')
runApp('C:/Users/noided/Desktop/ProjectMIDAS-main')
runApp('C:/Users/noided/Desktop/ProjectMIDAS-main')
# Define UI for application that draws a histogram
ui <- fluidPage(
?selectInput();
)
runApp()
?selectInput
?selectInput
?selectInput
?sliderInput
?sliderInput
?sliderInput
clear
?selectInput
?sliderInput
runApp('C:/Users/noided/Desktop/ProjectMIDAS-main')
shiny::runApp()
runApp()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
setwd(C:\Users\New User\Documents\R\ProjectMIDAS)
setwd('C:\Users\New User\Documents\R\ProjectMIDAS')
setwd('C:\\Users\\New User\\Documents\\R\\ProjectMIDAS')
runApp('R')
runApp('R')
getwd()
cd
ls
runApp('R')
getwd()
runApp('R')
uploadTabServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
uploadedData <- reactive({
# Check if uploadFile is not NULL, then set object to the uploadFile
req(input$uploadFile)
upFile <- input$uploadFile
# Get the filepath and extension of uploaded file
path <- upFile$datapath
ext <- tools::file_ext(upFile$name)
# Switch statement to use appropriate read function depending on extension
switch(ext,
csv = readr::read_csv(path),
xls = readxl::read_xls(path),
xlsx = readxl::read_xlsx(path)
)
})
observeEvent(input$test, {
print("Test Upload File")
print(input$uploadFile)
print(uploadedData())
})
data <- reactive({
uploadedData()
})
return(data)
}
)
}
tabItem(tabName = "studentTab",
# Student ID, Demographics, and Test Score header box, divided into 6 columns
fluidRow(
# ID Search Box
box(
title = "Student ID#",
fluidRow(
column(
8,
style = "padding-top: 5px; padding-left:10px; padding-bottom:1px; padding-right: 1px;",
uiOutput(NS(id, "inputStudentID"))
),
column(
4,
offset = 0,
style = "padding:5px; padding-bottom:1px;",
actionButton(NS(id, "btnStudentID"), label = "Search")
)
),
width = 2
),
# Grade box
box(
title = "Grade",
textOutput(NS(id, "studentGrade")),
width = 2
),
# Gender box
box(
title = "Gender",
textOutput(NS(id, "studentGender")),
width = 2
),
# Ethnicity box
box(
title = "Ethnicity",
textOutput(NS(id, "studentEthnicity")),
width = 2
),
# Special Education Status box
box(
title = "Special Education",
textOutput(NS(id, "studentSpecialEd")),
width = 2
),
# Test score box
box(
title = "Test Score",
textOutput(NS(id, "studentTestScore")),
width = 2
)
),
fluidRow(
# SAEBRS-TRS
column(
6,
verticalLayout(
box(
title = "SAEBRS-TRS",
fluidRow(
valueBoxOutput(NS(id, "trsTotalBox"), width = 12)
),
fluidRow(
valueBoxOutput(NS(id, "trsSocialBox")),
valueBoxOutput(NS(id, "trsAcademicBox")),
valueBoxOutput(NS(id, "trsEmotionalBox"))
),
width = 12
),
# SAEBRS-TRS barplot
box(
title = "TRS-TOTAL Average Score",
plotOutput(NS(id, "trsTotalBar")),
width = 12
)
)
),
# MySAEBRS
column(
6,
verticalLayout(
box(
title = "MySAEBRS",
fluidRow(
valueBoxOutput(NS(id, "myTotalBox"), width = 12)
),
fluidRow(
valueBoxOutput(NS(id, "mySocialBox")),
valueBoxOutput(NS(id, "myAcademicBox")),
valueBoxOutput(NS(id, "myEmotionalBox"))
),
width = 12
),
# SAEBRS-TRS barplot
box(
title = "MySAEBRS - Total Score Distribution",
plotOutput(NS(id, "myTotalBar")),
width = 12
)
)
)
)
)
studenttotalplot <-
ggplot(df_tbrange, aes(x = ranges, y = n)) +
geom_bar(stat = 'identity', aes(fill = ranges)) +
geom_text(aes(label = n),
position = position_dodge(width = 0.9),
vjust = -0.25) +
theme(legend.position = "none") +
ggtitle("MySAEBRS Total Score Distribution") +
xlab("Risk Levels") + ylab("Number of Students") +
scale_x_discrete(labels = c("High Risk", "Some Risk", "Low Risk"))
classTabServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
}
)
}
runApp('R')
runApp('R')
runApp()
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
getwd()
setwd("C:\\Users"
)
setwd("C:\\Users")
getwd()
runApp('New User/Documents/R/ProjectMIDAS/R')
