sidebarMenu(
id = "tabs",
menuItem(
text = "Upload Data",
tabName = "Upload",
icon = icon("tachometer-alt")
),
menuItem(
text = "Dashboard",
tabName = "Dashboard",
icon = icon("tachometer-alt")
),
menuItem("Student", tabName = "studentTab"),
menuItem("Class", tabName = "classTab"),
menuItem("Archive", tabName = "archiveTab")
)
),
# Body =====
body = dashboardBody(shinyjs::useShinyjs(),
fluidPage(
tabItems(#Upload - Uploading Data to be sent to Dashboard
#uploadTabUI(),
#School - Displaying School Data from Upload
schoolTabUI(),
#Student - Displaying student data
studentViewTabUI(),
#Class - Displaying class data
classTabUI(),
#Archive - under construction?
archiveTabUI())
#end of tabs
))
)
# Server -----
server <- function(input, output) {
uploadTabServer(input, output)
schoolTabServer(input, output)
studentViewTabServer(input, output)
classTabServer(input, output)
archiveTabServer(input, output)
}
# *Shiny Initialization* ----
shinyApp(ui = ui, server = server)
devtools::load_all(".")
uploadTabUI <- function(...) {
tabItem(tabName = "Upload",
fluidRow(box(
width = 12,
fileInput(
"file1",
"Please Upload File",
multiple = FALSE,
accept = c(
"text/csv",
".xlsx",
"text/comma-separated-values,text/plain",
".csv",
'.xlsx'
)
),
radioButtons(
"level",
"What Total Risk Levels should the Table display?",
c(
"All" = "all",
"Low" = "low",
"Some" = "some",
"High" = "high"
)
)
)))
}
usethis::use_rstudio()
devtools::load_all()
devtools::load_all(reset = FALSE)
library(shiny) #library for running Shiny Webapp
library(shinyjs) #library for js functions
library(shinydashboard) #dashboarding library
library(readxl) #library for taking in XLS/XLSX
library(ggplot2) #library for basic plots
library(tidyverse) #megapackage for analysis/operations
library(readr) #library for taking in
midasApp <- function(...) {
# UI -----
ui <- dashboardPage(
dashboardHeader(title = "Project MIDAS"),
# Sidebar =====
sidebar = dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem(
text = "Upload Data",
tabName = "Upload",
icon = icon("tachometer-alt")
),
menuItem(
text = "Dashboard",
tabName = "Dashboard",
icon = icon("tachometer-alt")
),
menuItem("Student", tabName = "studentTab"),
menuItem("Class", tabName = "classTab"),
menuItem("Archive", tabName = "archiveTab")
)
),
# Body =====
body = dashboardBody(shinyjs::useShinyjs(),
fluidPage(
tabItems(
#Upload - Uploading Data to be sent to Dashboard
uploadTabUI(),
#School - Displaying School Data from Upload
schoolTabUI(),
#Student - Displaying student data
studentViewTabUI(),
#Class - Displaying class data
classTabUI(),
#Archive - under construction?
archiveTabUI()
)
#end of tabs
))
)
# Server -----
server <- function(input, output) {
uploadTabServer(input, output)
schoolTabServer(input, output)
studentViewTabServer(input, output)
classTabServer(input, output)
archiveTabServer(input, output)
}
# *Shiny Initialization* ----
shinyApp(ui = ui, server = server)
}
midasApp()
devtools::load_all()
library(ProjectMIDAS)
source()
source("R")
source("R/")
sourceDirectory("R/", modifiedOnly = TRUE)
devtools::load_all()
usethis::use_rstudio()
devtools::load_all(".")
uploadTabUI <- function() {
tabItem(tabName = "Upload",
fluidRow(box(
width = 12,
fileInput(
"file1",
"Please Upload File",
multiple = FALSE,
accept = c(
"text/csv",
".xlsx",
"text/comma-separated-values,text/plain",
".csv",
'.xlsx'
)
),
radioButtons(
"level",
"What Total Risk Levels should the Table display?",
c(
"All" = "all",
"Low" = "low",
"Some" = "some",
"High" = "high"
)
)
)))
}
devtools::load_all(".")
schoolTabUI <- function(...) {
tabItem(
tabName = "Dashboard",
plotOutput("totalBar"),
plotOutput("socialBar"),
plotOutput("academicBar"),
plotOutput("emotionalBar"),
div(style = 'height:100vh; width:100vh; overflow: scroll',
tableOutput("contentsTable"))
)
}
schoolTabServer <- function(input, output) {
#Risk minimums reflect total score minimums from fastbridge site Thomas sent.
lowRiskMin <- 37
someRiskMin <- 24
output$totalBar <- renderPlot({
req(input$file1)
inFile <- input$file1
extension <- tools::file_ext(inFile$name)
filepath <- inFile$datapath
df <- switch(
extension,
csv = readr::read_csv(filepath),
xls = readxl::read_xls(filepath),
xlsx = readxl::read_xlsx(filepath)
)
df_tbrange <-
df %>% mutate(ranges = cut(totalBehavior, c(0, 24, 37, Inf))) %>%
group_by(ranges) %>% tally() %>% as.data.frame()
df_tbrange
totalbar <-
barplot(
df_tbrange$n,
main = "Total Behavior Distribution",
xlab = "Percentage of School",
col = "darkred",
names.arg = c("High Risk", "Some Risk", "Low Risk")
)
})
output$socialBar <- renderPlot({
req(input$file1)
inFile <- input$file1
extension <- tools::file_ext(inFile$name)
filepath <- inFile$datapath
df <- switch(
extension,
csv = readr::read_csv(filepath),
xls = readxl::read_xls(filepath),
xlsx = readxl::read_xlsx(filepath)
)
df_sbrange <-
df %>% mutate(ranges = cut(socialBehavior, c(0, 9, 12, Inf))) %>%
group_by(ranges) %>% tally() %>% as.data.frame()
df_sbrange
totalbar <-
barplot(
df_sbrange$n,
main = "Social Behavior Distribution",
xlab = "Percentage of School",
col = "darkred",
names.arg = c("High Risk", "Some Risk", "Low Risk")
)
})
output$academicBar <- renderPlot({
req(input$file1)
inFile <- input$file1
extension <- tools::file_ext(inFile$name)
filepath <- inFile$datapath
df <- switch(
extension,
csv = readr::read_csv(filepath),
xls = readxl::read_xls(filepath),
xlsx = readxl::read_xlsx(filepath)
)
df_abrange <-
df %>% mutate(ranges = cut(academicBehavior, c(0, 6, 9, Inf))) %>%
group_by(ranges) %>% tally() %>% as.data.frame()
df_abrange
totalbar <-
barplot(
df_abrange$n,
main = "Academic Behavior Distribution",
xlab = "Percentage of School",
col = "darkred",
names.arg = c("High Risk", "Some Risk", "Low Risk")
)
})
output$emotionalBar <- renderPlot({
req(input$file1)
inFile <- input$file1
extension <- tools::file_ext(inFile$name)
filepath <- inFile$datapath
df <- switch(
extension,
csv = readr::read_csv(filepath),
xls = readxl::read_xls(filepath),
xlsx = readxl::read_xlsx(filepath)
)
df_ebrange <-
df %>% mutate(ranges = cut(emotionalBehavior, c(0, 7, 10, Inf))) %>%
group_by(ranges) %>% tally() %>% as.data.frame()
df_ebrange
totalbar <-
barplot(
df_ebrange$n,
main = "Emotional Behavior Distribution",
xlab = "Percentage of School",
col = "darkred",
names.arg = c("High Risk", "Some Risk", "Low Risk")
)
})
output$contentsTable <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, all rows that reflect the selected risk level will be shown.
req(input$file1)
inFile <- input$file1
extension <- tools::file_ext(inFile$name)
filepath <- inFile$datapath
df <- switch(
extension,
csv = readr::read_csv(filepath),
xls = readxl::read_xls(filepath),
xlsx = readxl::read_xlsx(filepath)
)
options = list(scrollX = TRUE)
# This switch is used for demo purposes, needs to be changed for our dashboarding needs
switch(
input$level,
# Depending on radiobutton selected, the returned table reflects one risk group.
"low" = return(df[df$totalBehavior > lowRiskMin, ]),
"some" = return(df[df$totalBehavior > someRiskMin &
df$totalBehavior < lowRiskMin, ]),
"high" = return(df[df$totalBehavior < someRiskMin, ]),
"all" = return(df)
)
})
}
archiveTabUI <- function(...) {
tabItem(tabName = "archiveTab",
column(
12,
div(style = "background-color: #d0df92; padding: 5px; border-radius: 25px; height: 100%;")
))
}
archiveTabServer <- function(input, output) {
}
classTabUI <- function(...) {
tabItem(tabName = "classTab",
column(
6,
div(style = "background-color: #d0df92; padding: 5px; border-radius: 25px; height: 5%;")
),
column(
6,
div(style = "background-color: #d0df92; padding: 5px; border-radius: 25px; height: 90%;")
))
}
classTabServer <- function(input, output) {
}
# Loading in CSV and creating autocomplete list -----
studentData <- read.csv("data/dummy_midas_data2.csv")
rStudentData <- reactiveValues(data = studentData)
selectedStudent <- reactiveValues(data = NULL)
autocomplete_list <- paste0(studentData$lastName, ",", studentData$firstName)
# studentTab =====
studentViewTabUI <- function(...) {
tabItem(tabName = "studentTab",
# This column contains: student image, name, age, gender, ethnicity, grade, and special ed status
fluidRow(
column(
4,
style = "background-color: #d0df92; padding: 5px; border-radius: 25px;",
align = "center",
# Center and size for image
tags$head(
tags$style(
type = "text/css",
"#studentImage img {max-width: 100%; width: 100%, height: auto;}"
)
),
# Image
div(style = "height: 100px; width: 100px;",
imageOutput("studentImage")),
br(),
br(),
# Name search (changed to autocomplete to avoid crashes)
selectizeInput(
"txtinStudentName",
label = "Student Name (Last, First)",
choices = c("", autocomplete_list),
selected = '',
multiple = FALSE,
options = list(create = FALSE)
),
actionButton("btnStudentName", label = "Search"),
br(),
br(),
# Student demographic data
fluidRow(
column(
12,
align = "center",
p(tags$b("Gender")),
textOutput("studentGender"),
br(),
p(tags$b("Ethnicity")),
textOutput("studentEthnicity"),
br(),
p(tags$b("Grade")),
textOutput("studentGrade"),
br(),
p(tags$b("Special Education")),
textOutput("studentSpecialEd")
)
)
),
#MIDAS Assessments
column(
8,
div(style = "background-color: #d0df92; padding: 5px; border-radius: 25px; height: 90%;")
)
))
}
studentViewTabServer <- function(input, output) {
first <- reactiveVal()
last <- reactiveVal()
observeEvent(input$btnStudentName, {
last(strsplit(input$txtinStudentName, ",")[[1]][1])
first(str_trim(strsplit(input$txtinStudentName, ",")[[1]][2]))
selectedStudent$data <-
subset(rStudentData$data, lastName == last() &
firstName == first())
})
output$studentGender <- renderText({
selectedStudent$data$gender
})
output$studentImage <- renderImage({
# Load student image
filename <- normalizePath(file.path(
'assets/images',
paste('student-clip-art', '.png', sep =
'')
))
# Return a list containing the filename and alt text
list(src = filename,
alt = paste("Image not available"))
}, deleteFile = FALSE)
output$studentEthnicity <- renderText({
selectedStudent$data$ethnicity
})
output$studentGrade <- renderText({
selectedStudent$data$grade
})
output$studentSpecialEd <- renderText({
selectedStudent$data$specialEducation
})
}
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
ProjectMIDAS::uploadTabUI()
pkgload::load_all()
usethis::use_package("shiny")
usethis::use_description()
usethis::use_package("shiny")
usethis::use_package("shinyjs")
usethis::use_package("shinydashboard")
usethis::use_package("readxl")
usethis::use_package("ggplot2")
usethis::use_package("tidyverse")
usethis::use_package("readr")
devtools::load_all()
library(shiny) #library for running Shiny Webapp
library(shinyjs) #library for js functions
library(shinydashboard) #dashboarding library
library(readxl) #library for taking in XLS/XLSX
library(ggplot2) #library for basic plots
#library(tidyverse) #megapackage for analysis/operations
library(readr) #library for taking in
midasApp <- function(...) {
# UI -----
ui <- dashboardPage(
dashboardHeader(title = "Project MIDAS"),
# Sidebar =====
sidebar = dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem(
text = "Upload Data",
tabName = "Upload",
icon = icon("tachometer-alt")
),
menuItem(
text = "Dashboard",
tabName = "Dashboard",
icon = icon("tachometer-alt")
),
menuItem("Student", tabName = "studentTab"),
menuItem("Class", tabName = "classTab"),
menuItem("Archive", tabName = "archiveTab")
)
),
# Body =====
body = dashboardBody(shinyjs::useShinyjs(),
fluidPage(
tabItems(
#Upload - Uploading Data to be sent to Dashboard
uploadTabUI("uploadTab"),
#School - Displaying School Data from Upload
schoolTabUI(),
#Student - Displaying student data
studentViewTabUI(),
#Class - Displaying class data
classTabUI(),
#Archive - under construction?
archiveTabUI()
)
#end of tabs
))
)
# Server -----
server <- function(input, output) {
uploadTabServer(input, output)
schoolTabServer(input, output)
studentViewTabServer(input, output)
classTabServer(input, output)
archiveTabServer(input, output)
}
# *Shiny Initialization* ----
shinyApp(ui = ui, server = server)
}
midasApp()
getcwd()
getwd()
View(midasApp)
source("~/_School/2021-2022/Project MIDAS/ProjectMIDAS/R/uploadTab.R", echo=TRUE)
source("/R")
source("~/_School/2021-2022/Project MIDAS/ProjectMIDAS/R")
source("~/_School/2021-2022/Project MIDAS/ProjectMIDAS/R/")
